#include <stdio.h>
#include <stdlib.h>

typedef struct node {  
    int data;
    struct node *next;
} Node;

typedef struct {
    Node *head;
    int count;
} List;

List* initialize();
void empty(List *list);
void insertFirst(List *list, int data);
void insertLast(List *list, int data);
void insertPos(List *list, int data, int index);
void deleteStart(List *list);
void deleteLast(List *list);
void deletePos(List *list, int index);
int retrieve(List *list, int index);
int locate(List *list, int data);
void display(List *list);

int main() {
    
    List *list = initialize();

    insertFirst(list, 10);
    insertLast(list, 20);
    insertPos(list, 15, 1); 

    display(list);

    empty(list);  
    free(list);   

    return 0;
}

List* initialize() {
    List *list = (List*)malloc(sizeof(List));
    if (list == NULL) {
        printf("Memory allocation failed\n");
        exit(1);
    }
    list->head = NULL;
    list->count = 0;
    return list;
}

void empty(List *list){
    Node *current = list->head;
    while (current != NULL) {
        Node *temp = current;
        current = current->next;
        free(temp);
    }
    list->head = NULL;
    list->count = 0;
}

void insertFirst(List *list, int data){
    Node *newNode = (Node*)malloc(sizeof(Node));
    if (newNode == NULL){
        printf("Memory allocation failed\n");
        exit(1);
    }
    
    newNode->data = data;
    newNode->next = list->head;
    list->head = newNode;
    list->count++;
}

void insertLast(List *list, int data){
    Node *newNode = (Node*)malloc(sizeof(Node));
    if (newNode == NULL) {
        printf("Memory allocation failed\n");
        return;
    }
    
    newNode->data = data;
    newNode->next = NULL;
    
    if (list->head == NULL) {  
        list->head = newNode;
    } else {
        Node *temp = list->head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
    list->count++;
}

void insertPos(List *list, int data, int index){
    if (index < 0 || index > list->count){
        printf("Invalid Position\n");
        return;
    }
    
    if (index == 0) {
        insertFirst(list, data);
        return;
    }
    
    Node *newNode = (Node*)malloc(sizeof(Node));
    if (newNode == NULL) {
        printf("Memory allocation failed\n");
        return;
    }
    
    newNode->data = data;
    
    Node *temp = list->head;
    for (int i = 0; i < index - 1; i++) {
        temp = temp->next;
    }
    
    newNode->next = temp->next;
    temp->next = newNode;
    list->count++;
}

void deleteStart(List *list){
    
}

void deleteLast(List *list){
    
}

void deletePos(List *list, int index){

}

int retrieve(List *list, int index){
   
    return -1;
}

int locate(List *list, int data){
    
    return -1;
}

void display(List *list){
    Node *temp = list->head;

    while (temp != NULL) {
        printf("%d -> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}
