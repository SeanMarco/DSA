#include <stdio.h>
#include <stdlib.h>

typedef int studtype;

typedef struct {
    studtype *elemPtr;
    int count;
    int size;
} List;

void initialize(List *L, int size) {
    L->elemPtr = (studtype*)malloc(size * sizeof(studtype));
    L->count = 0;
    L->size = size;
}

void insertPos(List L, studtype elem, int pos) {
    if (pos < 0 || pos > L.count || L.count == L.size) return;
    for (int i = L.count; i > pos; i--) L.elemPtr[i] = L.elemPtr[i - 1];
    L.elemPtr[pos] = elem;
    L.count++;
}

void deletePos(List L, int pos) {
    if (pos < 0 || pos >= L.count) return;
    for (int i = pos; i < L.count - 1; i++) L.elemPtr[i] = L.elemPtr[i + 1];
    L.count--;
}

void locate(List L, int ID) {
    for (int i = 0; i < L.count; i++) {
        if (L.elemPtr[i] == ID) {
            printf("%d\n", i);
            return;
        }
    }
    printf("-1\n");
}

studtype retrieve(List L, int pos) {
    if (pos < 0 || pos >= L.count) return -1;
    return L.elemPtr[pos];
}

void insertSorted(List L, studtype elem) {
    if (L.count == L.size) return;
    int i = 0;
    while (i < L.count && L.elemPtr[i] < elem) i++;
    insertPos(L, elem, i);
}

void makeNULL(List *L) {
    free(L->elemPtr);
    L->elemPtr = NULL;
    L->count = 0;
    L->size = 0;
}

int main() {
    List myList;
    initialize(&myList, 10);
    insertPos(myList, 5, 0);
    insertPos(myList, 2, 1);
    insertSorted(myList, 4);
    locate(myList, 5);
    printf("%d\n", retrieve(myList, 1));
    deletePos(myList, 0);
    makeNULL(&myList);
    return 0;
}
