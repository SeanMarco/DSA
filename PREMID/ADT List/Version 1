#include <stdio.h>
#define MAX 10

typedef struct {
    int elem[MAX];
    int count;
} List;

List initialize();
List insertPos(List L, int position, int data);
List deletePos(List L, int position);
int locate(List L, int data);
List insertSorted(List L, int data);
void display(List L);

int main() {
    List L = initialize();

    L = insertPos(L, 0, 10);
    L = insertPos(L, 0, 20);
    L = insertPos(L, 0, 30);

    display(L);

    return 0;
}

List initialize() {
    List L;
    L.count = 0;
    return L;
}

List insertPos(List L, int position, int data) {
    if (L.count == MAX || position < 0 || position > L.count) {
        printf("Invalid Position\n");
        return L;
    }

    for (int i = L.count; i > position; i--) {
        L.elem[i] = L.elem[i - 1];
    }

    L.elem[position] = data;
    L.count++;

    return L;
}

List deletePos(List L, int position) {
    if (position < 0 || position >= L.count) {
        printf("Deletion FAILED: Invalid position.\n");
        return L;
    }

    for (int i = position; i < L.count - 1; i++) {
        L.elem[i] = L.elem[i + 1];
    }

    L.count--;
    return L;
}

int locate(List L, int data) {
    for (int i = 0; i < L.count; i++) {
        if (L.elem[i] == data) {
            return i;
        }
    }
    return -1;
}

List insertSorted(List L, int data) {
    if (L.count == MAX) {
        printf("Insertion failed: List full.\n");
        return L;
    }

    int i;
    for (i = 0; i < L.count; i++) {
        if (L.elem[i] > data) {
            break;
        }
    }

    return insertPos(L, data, i);
}

void display(List L) {
    if (L.count == 0) {
        printf("List is empty.\n");
        return;
    }

    printf("List elements: ");
    for (int i = 0; i < L.count; i++) {
        printf("%d ", L.elem[i]);
    }
    printf("\n");
}
